// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserProfile Component When provided with no props Should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserProfile />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="user-header"
        >
          <WithStyles(Typography)
            style={
              Object {
                "flex": 1,
              }
            }
            variant="display2"
          >
            Profile
            <WithStyles(Button)
              onClick={[Function]}
              style={
                Object {
                  "float": "right",
                }
              }
            >
              <pure(ArrowBackIcon) />
              Back
            </WithStyles(Button)>
          </WithStyles(Typography)>
        </div>,
        <WithStyles(Divider) />,
        <WithStyles(Snackbar)
          autoHideDuration={6000}
          message=""
          onClose={[Function]}
          open={false}
        />,
        <div
          className="user-profile-content"
        >
          <WithStyles(Card)
            className="input-paper"
            data-aos="zoom-in-up"
          >
            <WithStyles(CardContent)>
              <TextField
                InputProps={
                  Object {
                    "readOnly": true,
                  }
                }
                className="push-down"
                fullWidth={true}
                id="name"
                label="Full Name"
                required={false}
                select={false}
                value=""
                variant="standard"
              />
              <TextField
                className="push-down"
                disabled={false}
                fullWidth={true}
                id="address"
                label="Full Address"
                onChange={[Function]}
                required={true}
                select={false}
                value=""
                variant="standard"
              />
              <WithStyles(Button)
                className="input-button"
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                    "marginTop": 10,
                  }
                }
                variant="raised"
              >
                Update
              </WithStyles(Button)>
            </WithStyles(CardContent)>
          </WithStyles(Card)>
        </div>,
      ],
      "style": Object {
        "padding": "50px 200px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Typography)
            style={
              Object {
                "flex": 1,
              }
            }
            variant="display2"
          >
            Profile
            <WithStyles(Button)
              onClick={[Function]}
              style={
                Object {
                  "float": "right",
                }
              }
            >
              <pure(ArrowBackIcon) />
              Back
            </WithStyles(Button)>
          </WithStyles(Typography)>,
          "className": "user-header",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Profile",
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>,
            ],
            "style": Object {
              "flex": 1,
            },
            "variant": "display2",
          },
          "ref": null,
          "rendered": Array [
            "Profile",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <pure(ArrowBackIcon) />,
                  "Back",
                ],
                "onClick": [Function],
                "style": Object {
                  "float": "right",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Back",
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoHideDuration": 6000,
          "message": "",
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Card)
            className="input-paper"
            data-aos="zoom-in-up"
          >
            <WithStyles(CardContent)>
              <TextField
                InputProps={
                  Object {
                    "readOnly": true,
                  }
                }
                className="push-down"
                fullWidth={true}
                id="name"
                label="Full Name"
                required={false}
                select={false}
                value=""
                variant="standard"
              />
              <TextField
                className="push-down"
                disabled={false}
                fullWidth={true}
                id="address"
                label="Full Address"
                onChange={[Function]}
                required={true}
                select={false}
                value=""
                variant="standard"
              />
              <WithStyles(Button)
                className="input-button"
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                    "marginTop": 10,
                  }
                }
                variant="raised"
              >
                Update
              </WithStyles(Button)>
            </WithStyles(CardContent)>
          </WithStyles(Card)>,
          "className": "user-profile-content",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <TextField
                InputProps={
                  Object {
                    "readOnly": true,
                  }
                }
                className="push-down"
                fullWidth={true}
                id="name"
                label="Full Name"
                required={false}
                select={false}
                value=""
                variant="standard"
              />
              <TextField
                className="push-down"
                disabled={false}
                fullWidth={true}
                id="address"
                label="Full Address"
                onChange={[Function]}
                required={true}
                select={false}
                value=""
                variant="standard"
              />
              <WithStyles(Button)
                className="input-button"
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                    "marginTop": 10,
                  }
                }
                variant="raised"
              >
                Update
              </WithStyles(Button)>
            </WithStyles(CardContent)>,
            "className": "input-paper",
            "data-aos": "zoom-in-up",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <TextField
                  InputProps={
                    Object {
                      "readOnly": true,
                    }
                  }
                  className="push-down"
                  fullWidth={true}
                  id="name"
                  label="Full Name"
                  required={false}
                  select={false}
                  value=""
                  variant="standard"
                />,
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="address"
                  label="Full Address"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />,
                <WithStyles(Button)
                  className="input-button"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Update
                </WithStyles(Button)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "InputProps": Object {
                    "readOnly": true,
                  },
                  "className": "push-down",
                  "fullWidth": true,
                  "id": "name",
                  "label": "Full Name",
                  "required": false,
                  "select": false,
                  "value": "",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "push-down",
                  "disabled": false,
                  "fullWidth": true,
                  "id": "address",
                  "label": "Full Address",
                  "onChange": [Function],
                  "required": true,
                  "select": false,
                  "value": "",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Update",
                  "className": "input-button",
                  "color": "primary",
                  "onClick": [Function],
                  "style": Object {
                    "float": "right",
                    "marginTop": 10,
                  },
                  "variant": "raised",
                },
                "ref": null,
                "rendered": "Update",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="user-header"
          >
            <WithStyles(Typography)
              style={
                Object {
                  "flex": 1,
                }
              }
              variant="display2"
            >
              Profile
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>
            </WithStyles(Typography)>
          </div>,
          <WithStyles(Divider) />,
          <WithStyles(Snackbar)
            autoHideDuration={6000}
            message=""
            onClose={[Function]}
            open={false}
          />,
          <div
            className="user-profile-content"
          >
            <WithStyles(Card)
              className="input-paper"
              data-aos="zoom-in-up"
            >
              <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "readOnly": true,
                    }
                  }
                  className="push-down"
                  fullWidth={true}
                  id="name"
                  label="Full Name"
                  required={false}
                  select={false}
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="address"
                  label="Full Address"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Update
                </WithStyles(Button)>
              </WithStyles(CardContent)>
            </WithStyles(Card)>
          </div>,
        ],
        "style": Object {
          "padding": "50px 200px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Typography)
              style={
                Object {
                  "flex": 1,
                }
              }
              variant="display2"
            >
              Profile
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>
            </WithStyles(Typography)>,
            "className": "user-header",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Profile",
                <WithStyles(Button)
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                    }
                  }
                >
                  <pure(ArrowBackIcon) />
                  Back
                </WithStyles(Button)>,
              ],
              "style": Object {
                "flex": 1,
              },
              "variant": "display2",
            },
            "ref": null,
            "rendered": Array [
              "Profile",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <pure(ArrowBackIcon) />,
                    "Back",
                  ],
                  "onClick": [Function],
                  "style": Object {
                    "float": "right",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "Back",
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoHideDuration": 6000,
            "message": "",
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Card)
              className="input-paper"
              data-aos="zoom-in-up"
            >
              <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "readOnly": true,
                    }
                  }
                  className="push-down"
                  fullWidth={true}
                  id="name"
                  label="Full Name"
                  required={false}
                  select={false}
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="address"
                  label="Full Address"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Update
                </WithStyles(Button)>
              </WithStyles(CardContent)>
            </WithStyles(Card)>,
            "className": "user-profile-content",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "readOnly": true,
                    }
                  }
                  className="push-down"
                  fullWidth={true}
                  id="name"
                  label="Full Name"
                  required={false}
                  select={false}
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="address"
                  label="Full Address"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Update
                </WithStyles(Button)>
              </WithStyles(CardContent)>,
              "className": "input-paper",
              "data-aos": "zoom-in-up",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <TextField
                    InputProps={
                      Object {
                        "readOnly": true,
                      }
                    }
                    className="push-down"
                    fullWidth={true}
                    id="name"
                    label="Full Name"
                    required={false}
                    select={false}
                    value=""
                    variant="standard"
                  />,
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="address"
                    label="Full Address"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />,
                  <WithStyles(Button)
                    className="input-button"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Update
                  </WithStyles(Button)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "InputProps": Object {
                      "readOnly": true,
                    },
                    "className": "push-down",
                    "fullWidth": true,
                    "id": "name",
                    "label": "Full Name",
                    "required": false,
                    "select": false,
                    "value": "",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "push-down",
                    "disabled": false,
                    "fullWidth": true,
                    "id": "address",
                    "label": "Full Address",
                    "onChange": [Function],
                    "required": true,
                    "select": false,
                    "value": "",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Update",
                    "className": "input-button",
                    "color": "primary",
                    "onClick": [Function],
                    "style": Object {
                      "float": "right",
                      "marginTop": 10,
                    },
                    "variant": "raised",
                  },
                  "ref": null,
                  "rendered": "Update",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
