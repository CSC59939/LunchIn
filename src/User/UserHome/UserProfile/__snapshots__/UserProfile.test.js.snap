// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserProfile Component When provided with no props Should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserProfile />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <WithStyles(CssBaseline) />,
        <div
          className="user-header"
        >
          <WithStyles(Typography)
            style={
              Object {
                "flex": 1,
              }
            }
            variant="display2"
          >
            
            's Profile
            <WithStyles(Button)
              onClick={[Function]}
              style={
                Object {
                  "float": "right",
                }
              }
            >
              <pure(ArrowBackIcon) />
              Back
            </WithStyles(Button)>
          </WithStyles(Typography)>
        </div>,
        <WithStyles(Divider) />,
        <WithStyles(Snackbar)
          autoHideDuration={3000}
          message=""
          onClose={[Function]}
          open={false}
        />,
        <WithStyles(AppBar)
          className="bar"
          color="default"
          data-aos="zoom-in-up"
          position="static"
        >
          <WithStyles(Tabs)
            fullWidth={true}
            indicatorColor="primary"
            onChange={[Function]}
            textColor="primary"
            value={0}
          >
            <WithStyles(Tab)
              label="User Information Section"
            />
            <WithStyles(Tab)
              label="Change Email Section"
            />
            <WithStyles(Tab)
              label="Change Password Section"
            />
          </WithStyles(Tabs)>
        </WithStyles(AppBar)>,
        <ReactSwipableView
          animateHeight={false}
          animateTransitions={true}
          axis="x"
          disableLazyLoading={false}
          disabled={false}
          enableMouseEvents={false}
          hysteresis={0.6}
          ignoreNativeScroll={false}
          index={0}
          onChangeIndex={[Function]}
          resistance={false}
          springConfig={
            Object {
              "delay": "0s",
              "duration": "0.35s",
              "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
            }
          }
          threshold={5}
        >
          <TabContainer>
            <WithStyles(Card)
              className="input-paper"
              data-aos="zoom-in-up"
            >
              <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "readOnly": true,
                    }
                  }
                  className="push-down"
                  fullWidth={true}
                  id="name"
                  label="Full Name"
                  required={false}
                  select={false}
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="address"
                  label="Full Address"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="secondary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Update Address
                  <pure(HomeIcon)
                    style={
                      Object {
                        "marginLeft": 10,
                      }
                    }
                  />
                </WithStyles(Button)>
              </WithStyles(CardContent)>
            </WithStyles(Card)>
          </TabContainer>
          <TabContainer>
            <WithStyles(Card)
              className="input-paper"
              data-aos="zoom-in-up"
            >
              <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "endAdornment": <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(Tooltip)
                          placement="top"
                          title="Show Password"
                        >
                          <WithStyles(IconButton)
                            onClick={[Function]}
                          >
                            <pure(VisibilityOffIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(Tooltip)>
                      </WithStyles(InputAdornment)>,
                    }
                  }
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="currentPassword"
                  label="Current Password"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  type="password"
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="email"
                  label="New Email"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Change Email
                  <pure(EmailIcon)
                    style={
                      Object {
                        "marginLeft": 10,
                      }
                    }
                  />
                </WithStyles(Button)>
              </WithStyles(CardContent)>
            </WithStyles(Card)>
          </TabContainer>
          <TabContainer>
            <WithStyles(Card)
              className="input-paper"
              data-aos="zoom-in-up"
            >
              <WithStyles(CardContent)>
                <TextField
                  InputProps={
                    Object {
                      "endAdornment": <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(Tooltip)
                          placement="top"
                          title="Show Password"
                        >
                          <WithStyles(IconButton)
                            onClick={[Function]}
                          >
                            <pure(VisibilityOffIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(Tooltip)>
                      </WithStyles(InputAdornment)>,
                    }
                  }
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="currentPassword"
                  label="Current Password"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  type="password"
                  value=""
                  variant="standard"
                />
                <TextField
                  className="push-down"
                  disabled={false}
                  fullWidth={true}
                  id="password"
                  label="New Password"
                  onChange={[Function]}
                  required={true}
                  select={false}
                  type="password"
                  value=""
                  variant="standard"
                />
                <WithStyles(Button)
                  className="input-button"
                  color="inherit"
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                      "marginTop": 10,
                    }
                  }
                  variant="raised"
                >
                  Change Password
                  <pure(LockOpenIcon)
                    style={
                      Object {
                        "marginLeft": 10,
                      }
                    }
                  />
                </WithStyles(Button)>
              </WithStyles(CardContent)>
            </WithStyles(Card)>
          </TabContainer>
        </ReactSwipableView>,
      ],
      "style": Object {
        "padding": "50px 200px",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Typography)
            style={
              Object {
                "flex": 1,
              }
            }
            variant="display2"
          >
            
            's Profile
            <WithStyles(Button)
              onClick={[Function]}
              style={
                Object {
                  "float": "right",
                }
              }
            >
              <pure(ArrowBackIcon) />
              Back
            </WithStyles(Button)>
          </WithStyles(Typography)>,
          "className": "user-header",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "",
              "'s Profile",
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>,
            ],
            "style": Object {
              "flex": 1,
            },
            "variant": "display2",
          },
          "ref": null,
          "rendered": Array [
            "",
            "'s Profile",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <pure(ArrowBackIcon) />,
                  "Back",
                ],
                "onClick": [Function],
                "style": Object {
                  "float": "right",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Back",
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoHideDuration": 3000,
          "message": "",
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Tabs)
            fullWidth={true}
            indicatorColor="primary"
            onChange={[Function]}
            textColor="primary"
            value={0}
          >
            <WithStyles(Tab)
              label="User Information Section"
            />
            <WithStyles(Tab)
              label="Change Email Section"
            />
            <WithStyles(Tab)
              label="Change Password Section"
            />
          </WithStyles(Tabs)>,
          "className": "bar",
          "color": "default",
          "data-aos": "zoom-in-up",
          "position": "static",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Tab)
                label="User Information Section"
              />,
              <WithStyles(Tab)
                label="Change Email Section"
              />,
              <WithStyles(Tab)
                label="Change Password Section"
              />,
            ],
            "fullWidth": true,
            "indicatorColor": "primary",
            "onChange": [Function],
            "textColor": "primary",
            "value": 0,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "User Information Section",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "Change Email Section",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "label": "Change Password Section",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animateHeight": false,
          "animateTransitions": true,
          "axis": "x",
          "children": Array [
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "readOnly": true,
                      }
                    }
                    className="push-down"
                    fullWidth={true}
                    id="name"
                    label="Full Name"
                    required={false}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="address"
                    label="Full Address"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="secondary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Update Address
                    <pure(HomeIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>,
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="email"
                    label="New Email"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Email
                    <pure(EmailIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>,
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="password"
                    label="New Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="inherit"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Password
                    <pure(LockOpenIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>,
          ],
          "disableLazyLoading": false,
          "disabled": false,
          "enableMouseEvents": false,
          "hysteresis": 0.6,
          "ignoreNativeScroll": false,
          "index": 0,
          "onChangeIndex": [Function],
          "resistance": false,
          "springConfig": Object {
            "delay": "0s",
            "duration": "0.35s",
            "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
          },
          "threshold": 5,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "readOnly": true,
                      }
                    }
                    className="push-down"
                    fullWidth={true}
                    id="name"
                    label="Full Name"
                    required={false}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="address"
                    label="Full Address"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="secondary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Update Address
                    <pure(HomeIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "readOnly": true,
                      }
                    }
                    className="push-down"
                    fullWidth={true}
                    id="name"
                    label="Full Name"
                    required={false}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="address"
                    label="Full Address"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="secondary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Update Address
                    <pure(HomeIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>,
                "className": "input-paper",
                "data-aos": "zoom-in-up",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <TextField
                      InputProps={
                        Object {
                          "readOnly": true,
                        }
                      }
                      className="push-down"
                      fullWidth={true}
                      id="name"
                      label="Full Name"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    />,
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="address"
                      label="Full Address"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />,
                    <WithStyles(Button)
                      className="input-button"
                      color="secondary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Update Address
                      <pure(HomeIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "InputProps": Object {
                        "readOnly": true,
                      },
                      "className": "push-down",
                      "fullWidth": true,
                      "id": "name",
                      "label": "Full Name",
                      "required": false,
                      "select": false,
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "push-down",
                      "disabled": false,
                      "fullWidth": true,
                      "id": "address",
                      "label": "Full Address",
                      "onChange": [Function],
                      "required": true,
                      "select": false,
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        "Update Address",
                        <pure(HomeIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />,
                      ],
                      "className": "input-button",
                      "color": "secondary",
                      "onClick": [Function],
                      "style": Object {
                        "float": "right",
                        "marginTop": 10,
                      },
                      "variant": "raised",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Update Address",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "style": Object {
                            "marginLeft": 10,
                          },
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="email"
                    label="New Email"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Email
                    <pure(EmailIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="email"
                    label="New Email"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Email
                    <pure(EmailIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>,
                "className": "input-paper",
                "data-aos": "zoom-in-up",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />,
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="email"
                      label="New Email"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />,
                    <WithStyles(Button)
                      className="input-button"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Email
                      <pure(EmailIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "InputProps": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      },
                      "className": "push-down",
                      "disabled": false,
                      "fullWidth": true,
                      "id": "currentPassword",
                      "label": "Current Password",
                      "onChange": [Function],
                      "required": true,
                      "select": false,
                      "type": "password",
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "push-down",
                      "disabled": false,
                      "fullWidth": true,
                      "id": "email",
                      "label": "New Email",
                      "onChange": [Function],
                      "required": true,
                      "select": false,
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        "Change Email",
                        <pure(EmailIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />,
                      ],
                      "className": "input-button",
                      "color": "primary",
                      "onClick": [Function],
                      "style": Object {
                        "float": "right",
                        "marginTop": 10,
                      },
                      "variant": "raised",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Change Email",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "style": Object {
                            "marginLeft": 10,
                          },
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="password"
                    label="New Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="inherit"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Password
                    <pure(LockOpenIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="password"
                    label="New Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="inherit"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Password
                    <pure(LockOpenIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>,
                "className": "input-paper",
                "data-aos": "zoom-in-up",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />,
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="password"
                      label="New Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />,
                    <WithStyles(Button)
                      className="input-button"
                      color="inherit"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Password
                      <pure(LockOpenIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "InputProps": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      },
                      "className": "push-down",
                      "disabled": false,
                      "fullWidth": true,
                      "id": "currentPassword",
                      "label": "Current Password",
                      "onChange": [Function],
                      "required": true,
                      "select": false,
                      "type": "password",
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "push-down",
                      "disabled": false,
                      "fullWidth": true,
                      "id": "password",
                      "label": "New Password",
                      "onChange": [Function],
                      "required": true,
                      "select": false,
                      "type": "password",
                      "value": "",
                      "variant": "standard",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        "Change Password",
                        <pure(LockOpenIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />,
                      ],
                      "className": "input-button",
                      "color": "inherit",
                      "onClick": [Function],
                      "style": Object {
                        "float": "right",
                        "marginTop": 10,
                      },
                      "variant": "raised",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Change Password",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "style": Object {
                            "marginLeft": 10,
                          },
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <WithStyles(CssBaseline) />,
          <div
            className="user-header"
          >
            <WithStyles(Typography)
              style={
                Object {
                  "flex": 1,
                }
              }
              variant="display2"
            >
              
              's Profile
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>
            </WithStyles(Typography)>
          </div>,
          <WithStyles(Divider) />,
          <WithStyles(Snackbar)
            autoHideDuration={3000}
            message=""
            onClose={[Function]}
            open={false}
          />,
          <WithStyles(AppBar)
            className="bar"
            color="default"
            data-aos="zoom-in-up"
            position="static"
          >
            <WithStyles(Tabs)
              fullWidth={true}
              indicatorColor="primary"
              onChange={[Function]}
              textColor="primary"
              value={0}
            >
              <WithStyles(Tab)
                label="User Information Section"
              />
              <WithStyles(Tab)
                label="Change Email Section"
              />
              <WithStyles(Tab)
                label="Change Password Section"
              />
            </WithStyles(Tabs)>
          </WithStyles(AppBar)>,
          <ReactSwipableView
            animateHeight={false}
            animateTransitions={true}
            axis="x"
            disableLazyLoading={false}
            disabled={false}
            enableMouseEvents={false}
            hysteresis={0.6}
            ignoreNativeScroll={false}
            index={0}
            onChangeIndex={[Function]}
            resistance={false}
            springConfig={
              Object {
                "delay": "0s",
                "duration": "0.35s",
                "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
              }
            }
            threshold={5}
          >
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "readOnly": true,
                      }
                    }
                    className="push-down"
                    fullWidth={true}
                    id="name"
                    label="Full Name"
                    required={false}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="address"
                    label="Full Address"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="secondary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Update Address
                    <pure(HomeIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="email"
                    label="New Email"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Email
                    <pure(EmailIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>
            <TabContainer>
              <WithStyles(Card)
                className="input-paper"
                data-aos="zoom-in-up"
              >
                <WithStyles(CardContent)>
                  <TextField
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Tooltip)
                            placement="top"
                            title="Show Password"
                          >
                            <WithStyles(IconButton)
                              onClick={[Function]}
                            >
                              <pure(VisibilityOffIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(Tooltip)>
                        </WithStyles(InputAdornment)>,
                      }
                    }
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="currentPassword"
                    label="Current Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <TextField
                    className="push-down"
                    disabled={false}
                    fullWidth={true}
                    id="password"
                    label="New Password"
                    onChange={[Function]}
                    required={true}
                    select={false}
                    type="password"
                    value=""
                    variant="standard"
                  />
                  <WithStyles(Button)
                    className="input-button"
                    color="inherit"
                    onClick={[Function]}
                    style={
                      Object {
                        "float": "right",
                        "marginTop": 10,
                      }
                    }
                    variant="raised"
                  >
                    Change Password
                    <pure(LockOpenIcon)
                      style={
                        Object {
                          "marginLeft": 10,
                        }
                      }
                    />
                  </WithStyles(Button)>
                </WithStyles(CardContent)>
              </WithStyles(Card)>
            </TabContainer>
          </ReactSwipableView>,
        ],
        "style": Object {
          "padding": "50px 200px",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Typography)
              style={
                Object {
                  "flex": 1,
                }
              }
              variant="display2"
            >
              
              's Profile
              <WithStyles(Button)
                onClick={[Function]}
                style={
                  Object {
                    "float": "right",
                  }
                }
              >
                <pure(ArrowBackIcon) />
                Back
              </WithStyles(Button)>
            </WithStyles(Typography)>,
            "className": "user-header",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "",
                "'s Profile",
                <WithStyles(Button)
                  onClick={[Function]}
                  style={
                    Object {
                      "float": "right",
                    }
                  }
                >
                  <pure(ArrowBackIcon) />
                  Back
                </WithStyles(Button)>,
              ],
              "style": Object {
                "flex": 1,
              },
              "variant": "display2",
            },
            "ref": null,
            "rendered": Array [
              "",
              "'s Profile",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <pure(ArrowBackIcon) />,
                    "Back",
                  ],
                  "onClick": [Function],
                  "style": Object {
                    "float": "right",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "Back",
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoHideDuration": 3000,
            "message": "",
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Tabs)
              fullWidth={true}
              indicatorColor="primary"
              onChange={[Function]}
              textColor="primary"
              value={0}
            >
              <WithStyles(Tab)
                label="User Information Section"
              />
              <WithStyles(Tab)
                label="Change Email Section"
              />
              <WithStyles(Tab)
                label="Change Password Section"
              />
            </WithStyles(Tabs)>,
            "className": "bar",
            "color": "default",
            "data-aos": "zoom-in-up",
            "position": "static",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Tab)
                  label="User Information Section"
                />,
                <WithStyles(Tab)
                  label="Change Email Section"
                />,
                <WithStyles(Tab)
                  label="Change Password Section"
                />,
              ],
              "fullWidth": true,
              "indicatorColor": "primary",
              "onChange": [Function],
              "textColor": "primary",
              "value": 0,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "label": "User Information Section",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "label": "Change Email Section",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "label": "Change Password Section",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "animateHeight": false,
            "animateTransitions": true,
            "axis": "x",
            "children": Array [
              <TabContainer>
                <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "readOnly": true,
                        }
                      }
                      className="push-down"
                      fullWidth={true}
                      id="name"
                      label="Full Name"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="address"
                      label="Full Address"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="secondary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Update Address
                      <pure(HomeIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>
              </TabContainer>,
              <TabContainer>
                <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="email"
                      label="New Email"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Email
                      <pure(EmailIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>
              </TabContainer>,
              <TabContainer>
                <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="password"
                      label="New Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="inherit"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Password
                      <pure(LockOpenIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>
              </TabContainer>,
            ],
            "disableLazyLoading": false,
            "disabled": false,
            "enableMouseEvents": false,
            "hysteresis": 0.6,
            "ignoreNativeScroll": false,
            "index": 0,
            "onChangeIndex": [Function],
            "resistance": false,
            "springConfig": Object {
              "delay": "0s",
              "duration": "0.35s",
              "easeFunction": "cubic-bezier(0.15, 0.3, 0.25, 1)",
            },
            "threshold": 5,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "readOnly": true,
                        }
                      }
                      className="push-down"
                      fullWidth={true}
                      id="name"
                      label="Full Name"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="address"
                      label="Full Address"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="secondary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Update Address
                      <pure(HomeIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "readOnly": true,
                        }
                      }
                      className="push-down"
                      fullWidth={true}
                      id="name"
                      label="Full Name"
                      required={false}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="address"
                      label="Full Address"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="secondary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Update Address
                      <pure(HomeIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>,
                  "className": "input-paper",
                  "data-aos": "zoom-in-up",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <TextField
                        InputProps={
                          Object {
                            "readOnly": true,
                          }
                        }
                        className="push-down"
                        fullWidth={true}
                        id="name"
                        label="Full Name"
                        required={false}
                        select={false}
                        value=""
                        variant="standard"
                      />,
                      <TextField
                        className="push-down"
                        disabled={false}
                        fullWidth={true}
                        id="address"
                        label="Full Address"
                        onChange={[Function]}
                        required={true}
                        select={false}
                        value=""
                        variant="standard"
                      />,
                      <WithStyles(Button)
                        className="input-button"
                        color="secondary"
                        onClick={[Function]}
                        style={
                          Object {
                            "float": "right",
                            "marginTop": 10,
                          }
                        }
                        variant="raised"
                      >
                        Update Address
                        <pure(HomeIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />
                      </WithStyles(Button)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "InputProps": Object {
                          "readOnly": true,
                        },
                        "className": "push-down",
                        "fullWidth": true,
                        "id": "name",
                        "label": "Full Name",
                        "required": false,
                        "select": false,
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "push-down",
                        "disabled": false,
                        "fullWidth": true,
                        "id": "address",
                        "label": "Full Address",
                        "onChange": [Function],
                        "required": true,
                        "select": false,
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": Array [
                          "Update Address",
                          <pure(HomeIcon)
                            style={
                              Object {
                                "marginLeft": 10,
                              }
                            }
                          />,
                        ],
                        "className": "input-button",
                        "color": "secondary",
                        "onClick": [Function],
                        "style": Object {
                          "float": "right",
                          "marginTop": 10,
                        },
                        "variant": "raised",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Update Address",
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "style": Object {
                              "marginLeft": 10,
                            },
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="email"
                      label="New Email"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Email
                      <pure(EmailIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="email"
                      label="New Email"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Email
                      <pure(EmailIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>,
                  "className": "input-paper",
                  "data-aos": "zoom-in-up",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <TextField
                        InputProps={
                          Object {
                            "endAdornment": <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(Tooltip)
                                placement="top"
                                title="Show Password"
                              >
                                <WithStyles(IconButton)
                                  onClick={[Function]}
                                >
                                  <pure(VisibilityOffIcon) />
                                </WithStyles(IconButton)>
                              </WithStyles(Tooltip)>
                            </WithStyles(InputAdornment)>,
                          }
                        }
                        className="push-down"
                        disabled={false}
                        fullWidth={true}
                        id="currentPassword"
                        label="Current Password"
                        onChange={[Function]}
                        required={true}
                        select={false}
                        type="password"
                        value=""
                        variant="standard"
                      />,
                      <TextField
                        className="push-down"
                        disabled={false}
                        fullWidth={true}
                        id="email"
                        label="New Email"
                        onChange={[Function]}
                        required={true}
                        select={false}
                        value=""
                        variant="standard"
                      />,
                      <WithStyles(Button)
                        className="input-button"
                        color="primary"
                        onClick={[Function]}
                        style={
                          Object {
                            "float": "right",
                            "marginTop": 10,
                          }
                        }
                        variant="raised"
                      >
                        Change Email
                        <pure(EmailIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />
                      </WithStyles(Button)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "InputProps": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        },
                        "className": "push-down",
                        "disabled": false,
                        "fullWidth": true,
                        "id": "currentPassword",
                        "label": "Current Password",
                        "onChange": [Function],
                        "required": true,
                        "select": false,
                        "type": "password",
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "push-down",
                        "disabled": false,
                        "fullWidth": true,
                        "id": "email",
                        "label": "New Email",
                        "onChange": [Function],
                        "required": true,
                        "select": false,
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": Array [
                          "Change Email",
                          <pure(EmailIcon)
                            style={
                              Object {
                                "marginLeft": 10,
                              }
                            }
                          />,
                        ],
                        "className": "input-button",
                        "color": "primary",
                        "onClick": [Function],
                        "style": Object {
                          "float": "right",
                          "marginTop": 10,
                        },
                        "variant": "raised",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Change Email",
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "style": Object {
                              "marginLeft": 10,
                            },
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <WithStyles(Card)
                  className="input-paper"
                  data-aos="zoom-in-up"
                >
                  <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="password"
                      label="New Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="inherit"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Password
                      <pure(LockOpenIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>
                </WithStyles(Card)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(CardContent)>
                    <TextField
                      InputProps={
                        Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        }
                      }
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="currentPassword"
                      label="Current Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <TextField
                      className="push-down"
                      disabled={false}
                      fullWidth={true}
                      id="password"
                      label="New Password"
                      onChange={[Function]}
                      required={true}
                      select={false}
                      type="password"
                      value=""
                      variant="standard"
                    />
                    <WithStyles(Button)
                      className="input-button"
                      color="inherit"
                      onClick={[Function]}
                      style={
                        Object {
                          "float": "right",
                          "marginTop": 10,
                        }
                      }
                      variant="raised"
                    >
                      Change Password
                      <pure(LockOpenIcon)
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      />
                    </WithStyles(Button)>
                  </WithStyles(CardContent)>,
                  "className": "input-paper",
                  "data-aos": "zoom-in-up",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <TextField
                        InputProps={
                          Object {
                            "endAdornment": <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(Tooltip)
                                placement="top"
                                title="Show Password"
                              >
                                <WithStyles(IconButton)
                                  onClick={[Function]}
                                >
                                  <pure(VisibilityOffIcon) />
                                </WithStyles(IconButton)>
                              </WithStyles(Tooltip)>
                            </WithStyles(InputAdornment)>,
                          }
                        }
                        className="push-down"
                        disabled={false}
                        fullWidth={true}
                        id="currentPassword"
                        label="Current Password"
                        onChange={[Function]}
                        required={true}
                        select={false}
                        type="password"
                        value=""
                        variant="standard"
                      />,
                      <TextField
                        className="push-down"
                        disabled={false}
                        fullWidth={true}
                        id="password"
                        label="New Password"
                        onChange={[Function]}
                        required={true}
                        select={false}
                        type="password"
                        value=""
                        variant="standard"
                      />,
                      <WithStyles(Button)
                        className="input-button"
                        color="inherit"
                        onClick={[Function]}
                        style={
                          Object {
                            "float": "right",
                            "marginTop": 10,
                          }
                        }
                        variant="raised"
                      >
                        Change Password
                        <pure(LockOpenIcon)
                          style={
                            Object {
                              "marginLeft": 10,
                            }
                          }
                        />
                      </WithStyles(Button)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "InputProps": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(Tooltip)
                              placement="top"
                              title="Show Password"
                            >
                              <WithStyles(IconButton)
                                onClick={[Function]}
                              >
                                <pure(VisibilityOffIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(Tooltip)>
                          </WithStyles(InputAdornment)>,
                        },
                        "className": "push-down",
                        "disabled": false,
                        "fullWidth": true,
                        "id": "currentPassword",
                        "label": "Current Password",
                        "onChange": [Function],
                        "required": true,
                        "select": false,
                        "type": "password",
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "className": "push-down",
                        "disabled": false,
                        "fullWidth": true,
                        "id": "password",
                        "label": "New Password",
                        "onChange": [Function],
                        "required": true,
                        "select": false,
                        "type": "password",
                        "value": "",
                        "variant": "standard",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": Array [
                          "Change Password",
                          <pure(LockOpenIcon)
                            style={
                              Object {
                                "marginLeft": 10,
                              }
                            }
                          />,
                        ],
                        "className": "input-button",
                        "color": "inherit",
                        "onClick": [Function],
                        "style": Object {
                          "float": "right",
                          "marginTop": 10,
                        },
                        "variant": "raised",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Change Password",
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "style": Object {
                              "marginLeft": 10,
                            },
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
